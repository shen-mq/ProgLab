/*********************************************************************
程序名：输入年、月、日，判断该年是否为闰年，计算该日期为该年的第几天。
版权：遵从GPL版权协议，可自由使用和传播（请勿上传到收费性网络文库）
作者：anbangli@foxmail.com
日期：2019-08-09
说明：
3-9.输入一个日期（包含年月日），判断该年是否为闰年，并计算该日期为该年
的第几天（使用switch语句）。

解题分析：根据月份写一个 switch 结构来计算天数，还要考虑闰年的影响。
这两方面的关系需要事先考虑好。有些编程者先考虑闰年，在 if ... else ...
结构里写两个仅有稍微不同的 switch 结构，显然是不好的。较好的办法是先
根据月份写一个 switch 结构来计算天数，在后面再考虑闰年的影响。
*********************************************************************/

#include <iostream>
using namespace std;

int main() {
    int year, month, day;	//年月日
    int num;	//第几天

    cout << "请输入年、月、日：";
    cin >> year >> month >> day;

    //是先考虑年份是否闰年，还是先用switch结构分析月份？要事先考虑好。
    //有些读者先考虑是否闰年，然后分别写两个 switch 结构，那样很繁琐。

    //合理的方法是直接写一个 switch 结构分析月份。然后再考虑闰年。
    //但是本题与上一题又有所不同，在本题中是否闰年对 2 月之后的天数都有影响。
    //因此可以在 switch 结构之后再考虑闰年的影响。
    num = day; 	//把 num 的初始值设为本月的天数。然后再加上前面月份的天数。
    //如果此处把 num 的初始值设为0，则下面的每一个分支都要加上 day，比较重复。
    switch (month) {
        case 1:
            num += 0;
            break;
        case 2:
            num += 31;
            break;
        case 3:
            num += 31 + 28;  //先默认 2 月份为 28天。后面再考虑闰年
            break;
        case 4:
            num += 31 + 28 + 31;
            break;
        case 5:
            num += 31 + 28 + 31 + 30;
            break;
        case 6:
            num += 31 + 28 + 31 + 30 + 31;
            break;
        case 7:
            num += 31 + 28 + 31 + 30 + 31 + 30;
            break;
        case 8:
            num += 31 + 28 + 31 + 30 + 31 + 30 + 31;
            break;
        case 9:
            num += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31;
            break;
        case 10:
            num += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30;
            break;
        case 11:
            num += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31;
            break;
        case 12:
            num += 31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30;
            break;
        default:	//如果所输入的月份数字不正确，则给出一个特殊值表示有错误
            num = -1;
            break;
    }

//	//下面是使用数组的解法（待学完第6章之后可以使用），代替上面的 switch 结构
//	int mdays[12]={31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
//	num = day; 	//初始化为本月的天数
//	for (int i = 0; i < month - 1; ++i)	//前几个月的日子累加起来
//		num += mdays[i];

    //考虑闰年，在 2 月之后的月份都要加 1 天
    if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
        cout << year << " 是闰年\n";
        if (month > 2)
            num += 1;
    } else
        cout << year << " 不是闰年\n";

    cout << "该日期是当年的第 " << num << " 天" << endl;


//额外讨论：上面的 switch 结构中，每一个月份中都分别对前面月份中的天数累加起来。
//虽然结构清晰，但是看上去颇为复杂。下面是另一种巧妙的写法，把月份从 大 到 小 写起来，
//多个 case 都没写 break 语句，从而共享代码，实现了天数相加。
//	num = day; 	//初始化为本月的天数
//	switch(month) {
//		case 12:	// 12 月份就至少需要加上 11 月的天数。
//			num += 30; // 11 月份有 30 天。
//		case 11:
//			num += 31;
//		case 10:
//			num += 30;
//		case 9:
//			num += 31;
//		case 8:
//			num += 31;
//		case 7:
//			num += 30;
//		case 6:
//			num += 31;
//		case 5:
//			num += 30;
//		case 4:
//			num += 31;
//		case 3:
//			//闰年判断可以写在这里，也可以写到switch结构的后面
//		    if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {
//		        cout << year << " 是闰年\n";
//		        num += 29;
//		    } else {
//		        cout << year << " 不是闰年\n";
//		        num += 28;
//		    }
//		case 2:
//			num += 31;
//		case 1:
//			num += 0;
//			break;
//		default:	//如果所输入的月份数字不正确，则给出一个特殊值表示有错误
//			num = -1;
//			break;
//	}
//    cout << "该日期是当年的第 " << num << " 天" << endl;

    return 0;
}



