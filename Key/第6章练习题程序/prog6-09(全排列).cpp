/*********************************************************************
程序名： 从1 到 n 的自然数的全排列
版权：遵从GPL版权协议，可自由使用和传播（请勿上传到收费性网络文库）
作者：anbangli@foxmail.com
日期：2019-07-20
说明：6-9.从 n 个不同元素中，任取 m 个（m ≤n，m 与 n 均为自然数）不同的元素
按照一定的顺序排成一列，叫做从 n 个不同元素中取出 m 个元素的一个不重复排列。
请编写程序输出从 1 到给定的自然数 n 之间的所有自然数的所有不重复的排列，即
 n 的全排列。
 （提示：在程序中使用一个数组存放当前排列中的各个数字，用另一个数组保存各个
 数字是否已在当前排列中已使用过。本题较难。建议用递归函数）
*********************************************************************/

#include <iostream>
using namespace std;

//构造递归函数，摆放第 i 个位置的数字。n 为需要摆放的数字个数
void arrange(int n, int nums[], int used[], int i) {
	for (int j = 1; j <= n; ++j) {
		//如果数字 j 还未在当前排列中使用过，则第 i 个位置摆放数字 j
		//数字 j 是否使用过存放于 used[j-1]中
		if (!used[j - 1]) {	//未使用过
			nums[i] = j;	//把数字 j 摆放到第 i 个位置
			used[j - 1] = 1;	//标记数字 j 已在当前排列中摆放过
			if (i == n - 1) { //如果数字全部摆放完毕，则打印结果
				for (int k = 0; k < n; k++)
					cout << nums[k] << (k != n-1 ? " " : "\n");
			} else {
				arrange(n, nums, used, i + 1);
			}
			//回溯
			used[j-1] = 0;
		}
	}
}

int main() {
	const int MAX = 20;	//允许的最大数字
	//定义数组并全部初始化为 0。
	int nums[MAX] = {0};	//用于存放每个排列中的各个数字
	int used[MAX] = {0};	//用于表示各个数字在当前排列中是否已使用过
	//置 0 表示尚未使用， 置 1 表示已使用

	int n = 4;  //定义变量并初始化为示例数据
//	cout << "输入 n 的值(介于 1 至 " << MAX << " 之间)：";
//	while (!(cin >> n) || n < 1 || n > MAX){
//		cin.clear();
//		cin.sync();
//		cout << "请重新输入：" ;
//	}

	cout << "从 1 到 " << n << " 的所有自然数的全排列：\n";

	arrange(n, nums, used, 0);	//!!

	return 0;
}

