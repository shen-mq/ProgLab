/*********************************************************************
程序名：找出同构数 
版权：遵从GPL版权协议，可自由使用和传播（请勿上传到收费性网络文库）
作者：anbangli@foxmail.com
日期：2019-08-09
说明：
4-2.（生成与检查）如果一个数出现在它的平方数的右端，则这个数被称为一个
“同构数”。例如，5 出现在它的平方 25 的右端，5 就是同构数；25 出现在
它的平方 625 的右端，故 25 也是同构数。写程序找出1 ~ 100 内所有的同构数。

*********************************************************************/
#include <iostream>
using namespace std;

int main () {
	int n, m;

	cout <<"1--100 内的同构数：\n";
	//方法一：区分个位数和两位数，比较该数是否出现在其平方的右端（此方法仅适用于 1--100）
	for (n = 1; n < 100; n++) {
		m = n* n;	// n 的平方
		if (n < 10 && (m - n) % 10 == 0) //如果 n 是个位数，且出现在其平方的右端
			cout << n << "\t";
		if (n >= 10 && (m - n) % 100 == 0)	//如果 n 是两位数，且出现在其平方的右端
			cout << n << "\t";

		//上面两个 if 语句中的逻辑表达式可以合并，写成这样（表达式有点长，不易读懂)：
		//if ((n < 10 && (m - n) % 10 == 0) || (n >= 10 && (m - n) % 100 == 0))
		//	cout << n << "\t";
	}
	cout << endl << endl; //输出两个换行，以便与方法二区分

	//方法二：取该数最右边的数字依次进行比较。此方法适用更大的范围
	cout <<"1--1000 内的同构数：\n";
	int t;	//临时变量
	for (n = 1; n < 1000; n++) {
		m = n * n;
		t = n; //把 n 暂存到一个临时变量中（注意：不要在循环内部修改 n 的值！）
		while (t > 0) {	//对 m 和 t 的末尾数逐次比较
			if (m % 10 != t %10)	//如果末尾数不相等即可判断不是
				break;
			m = m / 10;
			t = t / 10;
		}
		if (t==0) //依次比较 m 和 t 的末尾数都相等
			cout << n << "\t";
	}
	return 0;
}


